import 'package:flutter/material.dart';
import 'package:flutter_redux/flutter_redux.dart';
import 'package:redux/redux.dart';

@immutable
class AppState {
  int value;
  AppState(this.value);
}

// One simple action: Increment
enum Actions { Increment, Decrement }

// The reducer, which takes the previous count and increments it in response
// to an Increment action.
AppState counterReducer(AppState previousState, dynamic action) {
  if (action == Actions.Increment) {
    return AppState(previousState.value + 1);
  } else if (action == Actions.Decrement) {
    return AppState(previousState.value - 1);
  }

  return previousState;
}

void main() {
  runApp(MyApp());
}

class MyApp extends StatelessWidget {
  var store = Store<AppState>(counterReducer, initialState: AppState(0));

  MyApp({Key? key}) : super(key: key);

  @override
  Widget build(BuildContext context) {
    return StoreProvider(
      store: store,
      child: MaterialApp(
        title: 'Flutter Demo',
        home: MyHomePage(store: store),
        routes: <String, WidgetBuilder>{
          '/increment': (BuildContext context) => const IncrementPage(),
          '/decrement': (BuildContext context) => const DecrementPage(),
        },
      ),
    );
  }
}

class MyHomePage extends StatefulWidget {
  final Store store;
  const MyHomePage({Key? key, required this.store}) : super(key: key);

  @override
  State<MyHomePage> createState() => _MyHomePageState();
}

class _MyHomePageState extends State<MyHomePage> {
  @override
  void initState() {
    super.initState();
  }

  @override
  Widget build(BuildContext context) {
    print(widget.store.state.value);
    return Scaffold(
      appBar: AppBar(
        title: const Text('TestProject'),
      ),
      body: Center(
        child: Padding(
          padding: const EdgeInsets.all(20),
          child: Column(
            mainAxisAlignment: MainAxisAlignment.center,
            children: [
              StoreConnector<AppState, String>(
                converter: (store) => store.state.value.toString(),
                builder: (context, count) {
                  return Text(
                    'The button has been pushed this many times: $count',
                    textAlign: TextAlign.center,
                    style: const TextStyle(color: Colors.black, fontSize: 16),
                  );
                },
              ),
              StoreConnector<AppState, VoidCallback>(
                builder: (context, callback) {
                  return ElevatedButton(
                    onPressed: callback,
                    child: const Icon(Icons.add),
                  );
                },
                converter: (store) {
                  return () => store.dispatch(Actions.Increment);
                },
              ),
              StoreConnector<AppState, VoidCallback>(
                builder: (context, callback) {
                  return ElevatedButton(
                    onPressed: callback,
                    child: const Icon(Icons.remove),
                  );
                },
                converter: (store) {
                  return () => store.dispatch(Actions.Decrement);
                },
              ),
              ElevatedButton(
                child: const Text('Go to Increment'),
                onPressed: () => Navigator.of(context).pushNamed('/increment'),
              ),
              ElevatedButton(
                child: const Text('Go to Decrement'),
                onPressed: () => Navigator.of(context).pushNamed('/decrement'),
              ),
            ],
          ),
        ),
      ),
    );
  }
}

class IncrementPage extends StatelessWidget {
  const IncrementPage({Key? key}) : super(key: key);

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: const Text('SettingsPage'),
      ),
      body: Center(
        child: Column(
          mainAxisAlignment: MainAxisAlignment.center,
          children: [
            StoreConnector<AppState, String>(
              converter: (store) => store.state.value.toString(),
              builder: (context, count) {
                return Text(
                  'Current count: $count',
                  style: Theme.of(context).textTheme.headline4,
                );
              },
            ),
            StoreConnector<AppState, VoidCallback>(
              builder: (context, callback) {
                return ElevatedButton(
                  onPressed: callback,
                  child: const Icon(Icons.add),
                );
              },
              converter: (store) {
                return () => store.dispatch(Actions.Increment);
              },
            ),
          ],
        ),
      ),
    );
  }
}

class DecrementPage extends StatelessWidget {
  const DecrementPage({Key? key}) : super(key: key);

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: const Text('SettingsPage'),
      ),
      body: Center(
        child: Column(
          mainAxisAlignment: MainAxisAlignment.center,
          children: [
            StoreConnector<AppState, String>(
              converter: (store) => store.state.value.toString(),
              builder: (context, count) {
                return Text(
                  'Current count: $count',
                  style: Theme.of(context).textTheme.headline4,
                );
              },
            ),
            StoreConnector<AppState, VoidCallback>(
              builder: (context, callback) {
                return ElevatedButton(
                  onPressed: callback,
                  child: const Icon(Icons.remove),
                );
              },
              converter: (store) {
                return () => store.dispatch(Actions.Decrement);
              },
            ),
          ],
        ),
      ),
    );
  }
}
